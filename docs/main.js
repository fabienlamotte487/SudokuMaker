(()=>{"use strict";class e{constructor(){this.grid=[],this.gridSolution=[],this.gridDifficulty=null,this.url="https://sudoku-api.vercel.app/api/dosuku",this.containerGrid=document.querySelector("main .grid"),this.numbersList=document.querySelector("main ul.numbers"),this.numbers=this.numbersList.querySelectorAll("main .numbers-items button"),this.loadPanel=document.querySelector("body .load-panel"),this.difficultyTarget=document.querySelector("main span.difficulty"),this.tryTarget=document.querySelector("main span.try"),this.loadClassname="loading",this.errorsCount=0,this.maxTry=3,this.defeatedModal=document.querySelector(".modal.defeated-message"),this.successModal=document.querySelector(".modal.success-message"),this.tileRemaining=9999,this.resetButtons=document.querySelectorAll(".modal button"),this.init()}init(){this.prepareGrid(),this.prepareNumberButtons(),this.prepareKeyboardEvents(),this.prepareResetButtons()}prepareKeyboardEvents(){document.addEventListener("keydown",(e=>{e.key>=1&&e.key<=9&&this.attributeValueToCell(e.key),"Backspace"==e.key&&this.removeValue()}))}async prepareGrid(){this.loadGrid(),await this.fetchSudoku()&&(this.buildGrid(),this.prepareGridCells(),this.showGrid(),this.setDifficulty(),this.setTry(),this.setTileRemaining())}prepareNumberButtons(){this.numbers.forEach((e=>{e.addEventListener("click",(t=>{const s=e.getAttribute("data-value");this.attributeValueToCell(s)}))}))}removeValue(e){const t=this.containerGrid.querySelector(".grid-cell.selected");t&&!t.classList.contains("success")&&(t.innerHTML="")}prepareGridCells(){this.containerGrid.querySelectorAll(".grid-cell").forEach((e=>{e.addEventListener("click",(()=>{this.selectCell(e)}))}))}selectCell(e){this.containerGrid.querySelectorAll(".grid-cell").forEach((e=>{e.classList.remove("selected")})),e.classList.add("selected"),this.numbersList.classList.contains("hidden")&&this.numbersList.classList.remove("hidden")}attributeValueToCell(e){const t=this.containerGrid.querySelector(".grid-cell.selected"),s=t.getAttribute("data-row"),i=t.getAttribute("data-cell");this.grid[s][i]=e,t.innerHTML=e,t.classList.contains("filled")&&t.classList.remove("filled"),this.checkValue(s,i,e,t),this.setTileRemaining()}checkValue(e,t,s,i){this.gridSolution[e][t]!=s?(this.addError(),i.classList.add("error"),i.classList.remove("success")):(i.classList.remove("error"),i.classList.add("success"))}loadGrid(){this.loadPanel.classList.contains(this.loadClassname)||this.loadPanel.classList.add(this.loadClassname)}showGrid(){this.loadPanel.classList.contains(this.loadClassname)&&this.loadPanel.classList.remove(this.loadClassname)}buildGrid(){let e="";this.grid.forEach(((t,s)=>{t.forEach(((t,i)=>{e+=`<div class="grid-cell ${0==t?"selectionnable":"fixed"}" data-row="${s}" data-cell="${i}">${t}</div>`}))})),this.containerGrid.innerHTML=e}setDifficulty(){"Easy"==this.gridDifficulty?this.difficultyTarget.innerHTML="Facile":"Medium"==this.gridDifficulty?this.difficultyTarget.innerHTML="Moyen":"Hard"==this.gridDifficulty?this.difficultyTarget.innerHTML="Difficile":this.difficultyTarget.innerHTML="Inconnu"}setTry(){this.tryTarget.innerHTML=this.maxTry-this.errorsCount}setTileRemaining(){let e=0;this.grid.forEach((t=>{e+=t.filter((e=>0==e)).length})),this.tileRemaining=e,0===this.tileRemaining&&this.errorsCount<this.maxTry&&this.showSuccessMessage()}async fetchSudoku(){try{const e=await fetch(this.url),t=await e.json();return this.grid=t.newboard.grids[0].value,this.gridSolution=t.newboard.grids[0].solution,this.gridDifficulty=t.newboard.grids[0].difficulty,!0}catch(e){return console.error("Error fetching Sudoku:",e),!1}}addError(){this.errorsCount++,this.setTry(),this.errorsCount>=3&&this.defeatedState()}defeatedState(){this.defeatedModal.classList.add("show")}showSuccessMessage(){this.successModal.classList.add("show")}prepareResetButtons(){this.resetButtons.forEach((e=>{e.addEventListener("click",(()=>{this.resetGrid()}))}))}resetGrid(){this.tileRemaining=9999,this.errorsCount=0,this.successModal.classList.remove("show"),this.defeatedModal.classList.remove("show"),this.prepareGrid(),this.prepareNumberButtons()}}document.addEventListener("DOMContentLoaded",(function(){new e}))})();